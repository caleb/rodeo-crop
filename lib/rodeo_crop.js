// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var extend;

  extend = function(obj, source) {
    var prop;
    if (source) {
      for (prop in source) {
        obj[prop] = source[prop];
      }
    }
    return obj;
  };

  window.RodeoCrop = (function() {
    function RodeoCrop(el, options) {
      this.el = el;
      this.src = el.src;
      this.options = extend({
        backgroundColor: '#222222',
        fixedRatio: false,
        ratio: 1
      }, options);
      this.initialize();
    }

    RodeoCrop.prototype.initialize = function() {
      this.container = document.createElement('div');
      this.container.className = 'rodeo-crop';
      this.container.style.height = '100%';
      this.container.style.width = '100%';
      this.stage = new Kinetic.Stage({
        container: this.container
      });
      this.imageLayer = new Kinetic.Layer;
      this.cropLayer = new Kinetic.Layer;
      this.stage.add(this.imageLayer);
      this.stage.add(this.cropLayer);
      this.el.parentNode.replaceChild(this.container, this.el);
      this.drawImage();
      this.drawCropTool();
      this.resizeStage();
      return this.addResizeListeners();
    };

    RodeoCrop.prototype.drawCropTool = function() {
      var _this = this;
      this.cropTool = new Kinetic.Group({
        draggable: true,
        dragBoundFunc: function(pos) {
          return {
            x: Math.max(Math.min(pos.x, _this.image.position().x + Math.floor(_this.scale * _this.image.width()) - _this.cropToolRect.width()), _this.image.position().x),
            y: Math.max(Math.min(pos.y, _this.image.position().y + Math.floor(_this.scale * _this.image.height()) - _this.cropToolRect.height()), _this.image.position().y)
          };
        }
      });
      this.cropToolRect = new Kinetic.Rect({
        fill: '#980000',
        opacity: 0.5,
        x: 0,
        y: 0,
        width: 100,
        height: 100
      });
      this.cropToolRect.addEventListener('mouseover', function() {
        return document.body.style.cursor = 'pointer';
      });
      this.cropToolRect.addEventListener('mouseout', function() {
        return document.body.style.cursor = 'default';
      });
      this.cropTool.add(this.cropToolRect);
      return this.cropLayer.add(this.cropTool);
    };

    RodeoCrop.prototype.drawImage = function() {
      var img,
        _this = this;
      img = document.createElement('img');
      img.onload = function(a) {
        _this.image = new Kinetic.Image({
          image: img,
          width: img.naturalWidth,
          height: img.naturalHeight
        });
        _this.imageLayer.add(_this.image);
        return _this.resizeImage();
      };
      return img.src = this.src;
    };

    RodeoCrop.prototype.addResizeListeners = function() {
      var cancelFrame, checkTriggers, requestFrame, resetTriggers, scrollListener, trigger, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      this.container.style.position = 'relative';
      this.resizeTriggers = document.createElement('div');
      this.expandTrigger = document.createElement('div');
      this.expandTriggerChild = document.createElement('div');
      this.expandTrigger.appendChild(this.expandTriggerChild);
      this.contractTrigger = document.createElement('div');
      this.contractTriggerChild = document.createElement('div');
      this.contractTrigger.appendChild(this.contractTriggerChild);
      this.resizeTriggers.style.visibility = 'hidden';
      _ref = [this.resizeTriggers, this.expandTrigger, this.contractTrigger, this.contractTriggerChild];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        trigger = _ref[_i];
        trigger.style.content = ' ';
        trigger.style.display = 'block';
        trigger.style.position = 'absolute';
        trigger.style.top = 0;
        trigger.style.left = 0;
        trigger.style.height = '100%';
        trigger.style.width = '100%';
        trigger.style.overflow = 'hidden';
      }
      _ref1 = [this.expandTrigger, this.contractTrigger];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        trigger = _ref1[_j];
        trigger.style.background = '#eee';
        trigger.style.overflow = 'auto';
      }
      this.contractTriggerChild.style.width = '200%';
      this.contractTriggerChild.style.height = '200%';
      this.resizeTriggers.appendChild(this.expandTrigger);
      this.resizeTriggers.appendChild(this.contractTrigger);
      this.container.appendChild(this.resizeTriggers);
      requestFrame = (function() {
        var raf,
          _this = this;
        raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(fn) {
          return window.setTimeout(fn, 20);
        };
        return function(fn) {
          return raf(fn);
        };
      })();
      cancelFrame = (function() {
        var cancel;
        cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;
        return function(id) {
          return cancel(id);
        };
      })();
      resetTriggers = function() {
        _this.contractTrigger.scrollLeft = _this.contractTrigger.scrollWidth;
        _this.contractTrigger.scrollTop = _this.contractTrigger.scrollHeight;
        _this.expandTriggerChild.style.width = _this.expandTrigger.offsetWidth + 1 + 'px';
        _this.expandTriggerChild.style.height = _this.expandTrigger.offsetHeight + 1 + 'px';
        _this.expandTrigger.scrollLeft = _this.expandTrigger.scrollWidth;
        return _this.expandTrigger.scrollTop = _this.expandTrigger.scrollHeight;
      };
      checkTriggers = function() {
        return _this.container.offsetWidth !== _this.container.__resizeLast__.width || _this.container.offsetHeight !== _this.container.__resizeLast__.height;
      };
      scrollListener = function(e) {
        resetTriggers();
        if (_this.__resizeRAF__) {
          cancelFrame(_this.__resizeRAF__);
        }
        return _this.__resizeRAF__ = requestFrame(function() {
          if (checkTriggers()) {
            _this.container.__resizeLast__.width = _this.container.offsetWidth;
            _this.container.__resizeLast__.height = _this.container.offsetHeight;
            return _this.resizeStage();
          }
        });
      };
      this.container.__resizeLast__ = {};
      this.container.__resizeListeners__ = [];
      resetTriggers();
      return this.container.addEventListener('scroll', scrollListener, true);
    };

    RodeoCrop.prototype.reSizeAndPositionCropTool = function() {
      var pos;
      pos = this.cropTool.dragBoundFunc()(this.cropTool.position());
      this.cropTool.position(pos);
      return this.cropTool.draw();
    };

    RodeoCrop.prototype.resizeImage = function() {
      var h, scaleMax, scaleMin, scaleX, scaleY, sh, sw, w, x, y;
      sw = this.stage.width();
      sh = this.stage.height();
      w = this.image.width();
      h = this.image.height();
      scaleX = 1;
      scaleY = 1;
      scaleMin = 1;
      scaleMax = 1;
      if (w > sw) {
        scaleX = sw / w;
      }
      if (h > sh) {
        scaleY = sh / h;
      }
      this.scale = Math.min(scaleX, scaleY);
      x = (sw / 2) - (w * this.scale / 2);
      y = (sh / 2) - (h * this.scale / 2);
      this.image.scale({
        x: 1 || this.scale,
        y: 1 || this.scale
      });
      this.image.width(Math.floor(this.scale * w));
      this.image.height(Math.floor(this.scale * h));
      this.image.position({
        x: Math.floor(x),
        y: Math.floor(y)
      });
      this.image.draw();
      if (this.cropTool) {
        return this.reSizeAndPositionCropTool();
      }
    };

    RodeoCrop.prototype.resizeStage = function() {
      var containerHeight, containerWidth;
      containerHeight = window.getComputedStyle(this.container).getPropertyValue('height');
      containerWidth = window.getComputedStyle(this.container).getPropertyValue('width');
      this.stage.width(parseInt(containerWidth, 10));
      this.stage.height(parseInt(containerHeight, 10));
      this.stage.clear();
      if (this.image) {
        return this.resizeImage();
      }
    };

    return RodeoCrop;

  })();

}).call(this);
